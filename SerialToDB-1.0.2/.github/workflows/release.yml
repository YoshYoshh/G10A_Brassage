name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: ${{ vars.RUST_VERSION || 'stable' }}
  BUILD_FEATURES: ${{ vars.BUILD_FEATURES || '' }}

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_extension: ""
            archive_extension: "tar.gz"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_extension: ".exe"
            archive_extension: "zip"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_extension: ""
            archive_extension: "tar.gz"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Get project name
      id: project_name
      shell: bash
      run: |
        echo "name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')" >> $GITHUB_OUTPUT

    - name: Create release directory
      shell: bash
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/${{ steps.project_name.outputs.name }}${{ matrix.binary_extension }} release/
        cp -r config release/

    - name: Create archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd release
        tar -czf ../${{ steps.project_name.outputs.name }}-linux-64.tar.gz *

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        Compress-Archive -Path * -DestinationPath ../${{ steps.project_name.outputs.name }}-windows-64.zip

    - name: Create archive (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd release
        tar -czf ../${{ steps.project_name.outputs.name }}-macos-64.tar.gz *

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.project_name.outputs.name }}-${{ matrix.target }}
        path: |
          ${{ steps.project_name.outputs.name }}-linux-64.tar.gz
          ${{ steps.project_name.outputs.name }}-windows-64.zip
          ${{ steps.project_name.outputs.name }}-macos-64.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get project name
      id: project_name
      run: |
        echo "name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          artifacts/${{ steps.project_name.outputs.name }}-x86_64-unknown-linux-gnu/${{ steps.project_name.outputs.name }}-linux-64.tar.gz
          artifacts/${{ steps.project_name.outputs.name }}-x86_64-pc-windows-msvc/${{ steps.project_name.outputs.name }}-windows-64.zip
          artifacts/${{ steps.project_name.outputs.name }}-x86_64-apple-darwin/${{ steps.project_name.outputs.name }}-macos-64.tar.gz
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
